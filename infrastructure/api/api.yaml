AWSTemplateFormatVersion: "2010-09-09"
Description: "Heart API"
Transform: "AWS::Serverless-2016-10-31"


Globals:
  Function:
    Architectures: [ arm64 ]
    Runtime: provided.al2023
    Handler: bootstrap
    Timeout: 5

Parameters:
  Env:
    Type: String
    AllowedValues:
      - dev
      - prod
  FirebaseCredentials:
    Type: String
    Description: "Firebase json key"
    NoEcho: true
  StageName:
    Type: String
    Default: "v1"
  WorkoutsDatabaseName:
    Type: String
    Default: "workouts"

Mappings:
  Env:
    dev:
      AccountDeletionOffset: 2 # days
      CorsOrigins: "https://dev.media.heart-of.me,https://dev.app.heart-of.me,http://localhost:8080"
      LogRetention: 3 # days
      UploadBucket: "583168578067-upload"
      MediaBucket: "583168578067-user-media"
      NeedDatabaseDeletionProtection: false
      SwaggerDocsEnabled: true
    prod:
      AccountDeletionOffset: 30 # days
      CorsOrigins: "https://media.heart-of.me,https://app.heart-of.me"
      LogRetention: 90 # days
      NeedDatabaseDeletionProtection: true
      SwaggerDocsEnabled: false


Resources:
  WorkoutsDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled:
        Fn::FindInMap: [ Env, !Ref Env, NeedDatabaseDeletionProtection ]
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      TableName: !Ref WorkoutsDatabaseName
      TimeToLiveSpecification:
        AttributeName: "scheduled_for_deletion_at"
        Enabled: true

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "heart-api"
      Description: "Heart of yours API"

  ScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: "account-deletions"

  MonitoringTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "monitoring-notifications"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - scheduler.amazonaws.com
                - apigateway.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "ApiPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:heart-*"
              - Effect: Allow
                Action:
                  - scheduler:CreateSchedule
                  - scheduler:DeleteSchedule
                Resource:
                  - !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/${ScheduleGroup}"
                  - !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/${ScheduleGroup}/*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/heart-*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/*"
                    - Bucket: !FindInMap [ Env, !Ref Env, UploadBucket ]
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/*"
                    - Bucket: !FindInMap [ Env, !Ref Env, MediaBucket ]
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/avatars/*"
                    - Bucket: !FindInMap [ Env, !Ref Env, MediaBucket ]
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref MonitoringTopic
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt WorkoutsDatabase.Arn

  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref Api

  BackgroundFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../api/ # where Makefile is
      Description: "Part of Heart: background job handler"
      Environment:
        Variables:
          MEDIA_BUCKET: !FindInMap [ Env, !Ref Env, MediaBucket ]
          FIREBASE_CREDENTIALS: !Ref FirebaseCredentials
          WORKOUTS_TABLE: !Ref WorkoutsDatabase
      FunctionName: "heart-background"
      Role: !GetAtt LambdaExecutionRole.Arn

  BackgroundFunctionEventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref BackgroundFunction
      Qualifier: "$LATEST"
      MaximumRetryAttempts: 0
      DestinationConfig:
        OnFailure:
          Destination: !Ref MonitoringTopic

  ApiFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ../../api/ # where Makefile is
      Description: "Part of Heart: API handler"
      Environment:
        Variables:
          ACCOUNT_DELETION_OFFSET: !FindInMap [ Env, !Ref Env, AccountDeletionOffset ]
          BACKGROUND_FUNCTION: !GetAtt BackgroundFunction.Arn
          BACKGROUND_ROLE: !GetAtt LambdaExecutionRole.Arn
          CORS_ORIGINS: !FindInMap [ Env, !Ref Env, CorsOrigins ]
          FIREBASE_CREDENTIALS: !Ref FirebaseCredentials
          GIN_MODE: release
          MEDIA_BUCKET: !FindInMap [ Env, !Ref Env, MediaBucket ]
          MIN_APP_VERSION: "1.0.0"
          MODE: "lambda"
          MONITORING_TOPIC: !Ref MonitoringTopic
          REGION: !Ref AWS::Region
          SCHEDULE_GROUP: !Ref ScheduleGroup
          SWAGGER_HOST: !Sub "${Api}.execute-api.${AWS::Region}.amazonaws.com" # temporary
          SWAGGER_DOCS_ENABLED: !FindInMap [ Env, !Ref Env, SwaggerDocsEnabled ]
          SWAGGER_BASE_PATH: !Sub "/${StageName}"
          UPLOAD_BUCKET: !FindInMap [ Env, !Ref Env, UploadBucket ]
          WORKOUTS_TABLE: !Ref WorkoutsDatabase
      FunctionName: "heart-api"
      Role: !GetAtt LambdaExecutionRole.Arn

  ApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub  "/aws/lambda/${ApiFunction}"
      RetentionInDays: !FindInMap [ Env, !Ref Env, LogRetention ]

  BackgroundFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub  "/aws/lambda/${BackgroundFunction}"
      RetentionInDays: !FindInMap [ Env, !Ref Env, LogRetention ]

  ApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ApiFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*"
        - Api: !Ref Api

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: None
      RestApiId: !Ref Api
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiFunction
    Properties:
      RestApiId: !Ref Api

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref StageName
      RestApiId: !Ref Api
      DeploymentId: !Ref Deployment
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: '/*'
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 200

Outputs:
  ApiUrl:
    Description: "API Gateway full URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
    Export:
      Name: !Sub "${AWS::StackName}-api-url"

