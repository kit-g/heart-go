name: "Deploy"

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  lint:
    name: "Lint Go Code"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: 1.24
          cache: true
          cache-dependency-path: api/go.sum

      - name: "Cache golangci-lint"
        uses: actions/cache@v3
        with:
          path: ~/.cache/golangci-lint
          key: golangci-lint-${{ runner.os }}-${{ hashFiles('api/go.sum', '.golangci.yml') }}

      - name: "Install golangci-lint"
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.62.2

      - name: "Run golangci-lint"
        working-directory: api
        run: golangci-lint run ./...

  build-artifact:
    name: "Build Lambda Artifact"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.24
          cache: true
          cache-dependency-path: api/go.sum

      - name: "Install dependencies"
        working-directory: api
        run: go mod download

      - name: "Install swag2op"
        run: go install github.com/zxmfke/swagger2openapi3/cmd/swag2op@latest

      - name: "Generate OpenAPI"
        run: |
          export PATH="$PATH:$(go env GOPATH)/bin"
          swag2op init \
            --generalInfo api/cmd/api/main.go \
            --output api/docs \
            --openapiOutputDir api/docs 

      - name: "Build Lambda binary"
        working-directory: api
        run: ARTIFACTS_DIR=. make build-ApiFunction

      - name: "Zip Lambda binary"
        working-directory: api
        run: zip function.zip bootstrap

      - name: "Upload Lambda artifact"
        uses: actions/upload-artifact@v4
        with:
          name: lambda-zip
          path: api/function.zip

      - name: "Export commit SHA"
        id: "commit"
        run: echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    outputs:
      commit: ${{ steps.commit.outputs.commit }}

  api-tests:
    name: "Run API Tests"
    runs-on: ubuntu-latest
    needs: [ lint, build-artifact ]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: 1.24
          cache: true
          cache-dependency-path: api/go.sum

      - name: "Run model tests"
        working-directory: "api/internal/models"
        run: go test . -v

  api-deploy:
    name: "Deploy Heart API"
    runs-on: ubuntu-latest
    needs: [ api-tests ]
    env:
      AWS_REGION: "ca-central-1"
      AWS_ROLE: "arn:aws:iam::583168578067:role/HeartGitHubActionsDeployRole"
      FUNCTION_NAME: "heart-api"
    steps:
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Download Lambda Artifact"
        uses: actions/download-artifact@v4
        with:
          name: lambda-zip
          path: api/

      - name: "Update Api Lambda Function Code"
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.FUNCTION_NAME }} \
            --zip-file fileb://api/function.zip \
            --region ${{ env.AWS_REGION }} > /dev/null

  smoke-test:
    name: "Smoke Test Deployed API"
    runs-on: ubuntu-latest
    needs: [ api-deploy, build-artifact ]
    env:
      EXPECTED_COMMIT: ${{ needs.build-artifact.outputs.commit }}
      API: "https://bsm50dxdal.execute-api.ca-central-1.amazonaws.com/v1"
    steps:
      - name: "Check /version endpoint"
        run: |
          echo "Expecting commit: $EXPECTED_COMMIT"

          response=$(curl -s $API/version)
          echo "Response: $response"

          deployed_commit=$(echo "$response" | jq -r .commit)

          if [ "$deployed_commit" != "$EXPECTED_COMMIT" ]; then
            echo "Deployed commit ($deployed_commit) does not match expected ($EXPECTED_COMMIT)"
            exit 1
          fi

          echo "Smoke test passed: commit matches."
